version: '3.8'

services:
  # 애플리케이션 서버
  app:
    build:
      context: .
      dockerfile: docker/production/Dockerfile
    container_name: ahhob-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - ./storage/app:/var/www/html/storage/app
      - ./storage/logs:/var/www/html/storage/logs
      - ./public/uploads:/var/www/html/public/uploads
    environment:
      - APP_ENV=production
      - CONTAINER_ROLE=app
    depends_on:
      - database
      - redis
    networks:
      - ahhob-network

  # 큐 워커
  queue:
    build:
      context: .
      dockerfile: docker/production/Dockerfile
    container_name: ahhob-queue
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - ./storage/app:/var/www/html/storage/app
      - ./storage/logs:/var/www/html/storage/logs
    environment:
      - APP_ENV=production
      - CONTAINER_ROLE=queue
    depends_on:
      - database
      - redis
    networks:
      - ahhob-network

  # 스케줄러
  scheduler:
    build:
      context: .
      dockerfile: docker/production/Dockerfile
    container_name: ahhob-scheduler
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - ./storage/app:/var/www/html/storage/app
      - ./storage/logs:/var/www/html/storage/logs
    environment:
      - APP_ENV=production
      - CONTAINER_ROLE=scheduler
    depends_on:
      - database
      - redis
    networks:
      - ahhob-network

  # Nginx 웹 서버
  nginx:
    image: nginx:1.25-alpine
    container_name: ahhob-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www/html:ro
      - ./docker/production/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/production/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/production/ssl:/etc/nginx/ssl:ro
      - ./storage/logs/nginx:/var/log/nginx
      - letsencrypt-certs:/etc/letsencrypt:ro
      - letsencrypt-www:/var/www/certbot:ro
    depends_on:
      - app
    networks:
      - ahhob-network

  # Let's Encrypt SSL 인증서
  certbot:
    image: certbot/certbot:latest
    container_name: ahhob-certbot
    volumes:
      - letsencrypt-certs:/etc/letsencrypt
      - letsencrypt-www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    depends_on:
      - nginx
    networks:
      - ahhob-network
    profiles:
      - ssl

  # MariaDB 데이터베이스
  database:
    image: mariadb:11-jammy
    container_name: ahhob-database
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD: 'no'
    volumes:
      - ./docker/production/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ahhob-db-data:/var/lib/mysql
      - ./docker/production/mysql/init:/docker-entrypoint-initdb.d:ro
      - ./storage/logs/mysql:/var/log/mysql
    ports:
      - "${DB_PORT:-3306}:3306"
    networks:
      - ahhob-network
    command: 
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --innodb-buffer-pool-size=1G
      - --innodb-log-file-size=256M
      - --max-connections=300
      - --query-cache-size=64M
      - --query-cache-type=1

  # Redis 캐시 및 세션
  redis:
    image: redis:7-alpine
    container_name: ahhob-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - ahhob-redis-data:/data
      - ./docker/production/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - ahhob-network

  # 모니터링 (선택적)
  monitoring:
    image: grafana/grafana:latest
    container_name: ahhob-monitoring
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ahhob-grafana-data:/var/lib/grafana
      - ./docker/production/grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - ahhob-network
    profiles:
      - monitoring

volumes:
  ahhob-db-data:
    driver: local
  ahhob-redis-data:
    driver: local
  ahhob-grafana-data:
    driver: local
  letsencrypt-certs:
    driver: local
  letsencrypt-www:
    driver: local

networks:
  ahhob-network:
    driver: bridge